package org.ripple.bouncycastle.crypto.prng;

/**
 * takes bytes generated by an underling randomgenerator and reverses the order in
 * each small window (of configurable size).
 * <p>
 * access to internals is synchronized so a single one of these can be shared.
 * </p>
 */
public class reversedwindowgenerator
    implements randomgenerator
{
    private final randomgenerator generator;

    private byte[] window;
    private int windowcount;

    public reversedwindowgenerator(
        randomgenerator generator,
        int             windowsize)
    {
        if (generator == null)
        {
            throw new illegalargumentexception("generator cannot be null");
        }
        if (windowsize < 2)
        {
            throw new illegalargumentexception("windowsize must be at least 2");
        }

        this.generator = generator;
        this.window = new byte[windowsize];
    }

    /**
     * add more seed material to the generator.
     *
     * @param seed a byte array to be mixed into the generator's state.
     */
    public void addseedmaterial(
        byte[] seed)
    {
        synchronized (this)
        {
            windowcount = 0;
            generator.addseedmaterial(seed);
        }
    }

    /**
     * add more seed material to the generator.
     *
     * @param seed a long value to be mixed into the generator's state.
     */
    public void addseedmaterial(
        long seed)
    {
        synchronized (this)
        {
            windowcount = 0;
            generator.addseedmaterial(seed);
        }
    }

    /**
     * fill bytes with random values.
     *
     * @param bytes byte array to be filled.
     */
    public void nextbytes(
        byte[] bytes)
    {
        donextbytes(bytes, 0, bytes.length);
    }

    /**
     * fill part of bytes with random values.
     *
     * @param bytes byte array to be filled.
     * @param start index to start filling at.
     * @param len length of segment to fill.
     */
    public void nextbytes(
        byte[]  bytes,
        int     start,
        int     len)
    {
        donextbytes(bytes, start, len);
    }

    private void donextbytes(
        byte[]  bytes,
        int     start,
        int     len)
    {
        synchronized (this)
        {
            int done = 0;
            while (done < len)
            {
                if (windowcount < 1)
                {
                    generator.nextbytes(window, 0, window.length);
                    windowcount = window.length;
                }

                bytes[start + done++] = window[--windowcount];
            }
        }
    }
}
