package org.ripple.bouncycastle.crypto.generators;

import org.ripple.bouncycastle.crypto.datalengthexception;
import org.ripple.bouncycastle.crypto.derivationfunction;
import org.ripple.bouncycastle.crypto.derivationparameters;
import org.ripple.bouncycastle.crypto.digest;
import org.ripple.bouncycastle.crypto.params.mgfparameters;

/**
 * generator for mgf1 as defined in pkcs 1v2
 */
public class mgf1bytesgenerator
    implements derivationfunction
{
    private digest  digest;
    private byte[]  seed;
    private int     hlen;

    /**
     * @param digest the digest to be used as the source of generated bytes
     */
    public mgf1bytesgenerator(
        digest  digest)
    {
        this.digest = digest;
        this.hlen = digest.getdigestsize();
    }

    public void init(
        derivationparameters    param)
    {
        if (!(param instanceof mgfparameters))
        {
            throw new illegalargumentexception("mgf parameters required for mgf1generator");
        }

        mgfparameters   p = (mgfparameters)param;

        seed = p.getseed();
    }

    /**
     * return the underlying digest.
     */
    public digest getdigest()
    {
        return digest;
    }

    /**
     * int to octet string.
     */
    private void itoosp(
        int     i,
        byte[]  sp)
    {
        sp[0] = (byte)(i >>> 24);
        sp[1] = (byte)(i >>> 16);
        sp[2] = (byte)(i >>> 8);
        sp[3] = (byte)(i >>> 0);
    }

    /**
     * fill len bytes of the output buffer with bytes generated from
     * the derivation function.
     *
     * @throws datalengthexception if the out buffer is too small.
     */
    public int generatebytes(
        byte[]  out,
        int     outoff,
        int     len)
        throws datalengthexception, illegalargumentexception
    {
        if ((out.length - len) < outoff)
        {
            throw new datalengthexception("output buffer too small");
        }
        
        byte[]  hashbuf = new byte[hlen];
        byte[]  c = new byte[4];
        int     counter = 0;

        digest.reset();

        if (len > hlen)
        {
            do
            {
                itoosp(counter, c);
    
                digest.update(seed, 0, seed.length);
                digest.update(c, 0, c.length);
                digest.dofinal(hashbuf, 0);
    
                system.arraycopy(hashbuf, 0, out, outoff + counter * hlen, hlen);
            }
            while (++counter < (len / hlen));
        }

        if ((counter * hlen) < len)
        {
            itoosp(counter, c);

            digest.update(seed, 0, seed.length);
            digest.update(c, 0, c.length);
            digest.dofinal(hashbuf, 0);

            system.arraycopy(hashbuf, 0, out, outoff + counter * hlen, len - (counter * hlen));
        }

        return len;
    }
}
